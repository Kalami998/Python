# 算术运算符
a = 3, b = 4

# 加法
c = a + b

# 减法
d = b - a

# 向下取整
e = c // b

# 乘法
f = c*b

# 除法
g = c / a


# x**y x的y次幂
h = a**b


"""
比较运算符

等于     ==
不等于   !=
大于     >
小于     <
大于等于 >=
小于等于 <=
"""


"""
赋值运算符
=	简单的赋值运算符    c = a + b   将 a + b 的运算结果赋值为 c
+=	加法赋值运算符  	c += a      等效于 c = c + a
-=	减法赋值运算符  	c -= a      等效于 c = c - a
*=	乘法赋值运算符  	c *= a      等效于 c = c * a
/=	除法赋值运算符  	c /= a      等效于 c = c / a
%=	取模赋值运算符	    c %= a      等效于 c = c % a
**=	幂赋值运算符	    c **= a     等效于 c = c ** a
//=	取整除赋值运算符	c //= a     等效于 c = c // a
"""

"""
位运算符
a = 60 #二进制 0011 1100
b = 13 #二进制 0000 1101

&	按位与运算符：参与运算的两个值,                              (a & b) 输出结果 12 ，二进制解释： 0000 1100
    如果两个相应位都为1,则该位的结果为1,否则为0

|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101

^	按位异或运算符：当两对应的二进位相异时，结果为1	               (a ^ b) 输出结果 49 ，二进制解释： 0011 0001

~	按位取反运算符：对数据的每个二进制位取反,即把1变为0            (~a ) 输出结果 -61 ，二进制解释： 1100 0011，
    ,把0变为1 。~x 类似于 -x-1	                                在一个有符号二进制数的补码形式。             
   
<<	左移动运算符：运算数的各二进位全部左移若干位，	               a << 2 输出结果 240 ，二进制解释： 1111 0000
    由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。

>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，      a >> 2 输出结果 15 ，二进制解释： 0000 1111
    >> 右边的数字指定了移动的位数
"""

"""
逻辑运算符
假设 a = 10 , b = 20

and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	 (a and b) 返回 20。

or	x or y	布尔"或" - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。	  (a or b) 返回 10。

not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。   not(a and b) 返回 False
"""
# eg:
a = 10, b = 20
if a and b:
    print(' a and b 返回true ')
else:
    print(' a and b 返回失败 ')


"""
成员运算符 如在可迭代的对象查找
in     如果存在返回 True     ,否则返回false
not in 如果没有找到返回True  ,否则返回false
"""
# eg
if 5 in [1, 2, 3, 5, 6]:
    print('5 存在于列表中')
else:
    print('5 不存在数字列表中')

if 4 not in [1, 2, 3, 6]:
    print('4 不存在于列表中')
else:
    print('4 存在数字列表中')


"""
身份运算符
比较俩个标识符是不是引用自一个对象
is     是统一引用返回True    否则返回false

is not 不是统一引用 返回True 是统一引用返回false
"""
